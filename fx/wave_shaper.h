#ifndef WAVE_SHAPER_H
#define WAVE_SHAPER_H

#include <functional>
#include <vector>
#include "signal.h"

// Shapes an input signal between -1 and 1 to the curve generated by the
// supplied function over the supplied range.
//
// This function is heavily inspired by the Chromium project's wave shapper:
//
// https://chromium.googlesource.com/chromium/blink/+/master/Source/modules/webaudio/WaveShaperDSPKernel.cpp
class WaveShaper {
 public:
  WaveShaper(std::function<SignalType(int)> curve_generator,
             int points_to_generate) {
    for (int point = 0; point < points_to_generate; ++point) {
      curve_.push_back(curve_generator(point * 2 / (points_to_generate - 1)));
    }
  }

  SignalType operator()(SignalType input) {
    // Calculate a virtual index based on input, then linearly interpolate
    // between the two points in the curve.
    double virtual_index = 0.5 * (input + 1) * (curve_.size() - 1);
    if (virtual_index < 0) {
      return curve_.front();
    }
    if (virtual_index >= curve_.size() - 1) {
      return curve_.back();
    }

    // Interpolate between the nearest samples on the curve.
    unsigned index1 = static_cast<unsigned>(virtual_index);
    unsigned index2 = index1 + 1;

    double interpolation_factor = virtual_index - index1;
    double value1 = curve_[index1];
    double value2 = curve_[index2];
    return (1.0 - interpolation_factor) * value1 +
           interpolation_factor * value2;
  }

 private:
  std::vector<SignalType> curve_;
};

#endif /* WAVE_SHAPER_H */
